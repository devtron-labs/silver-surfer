// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.1
// source: app/grpc/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SilverSurferServiceClient is the client API for SilverSurferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SilverSurferServiceClient interface {
	GetClusterUpgradeSummaryValidationResult(ctx context.Context, in *ClusterUpgradeRequest, opts ...grpc.CallOption) (*ClusterUpgradeResponse, error)
}

type silverSurferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSilverSurferServiceClient(cc grpc.ClientConnInterface) SilverSurferServiceClient {
	return &silverSurferServiceClient{cc}
}

func (c *silverSurferServiceClient) GetClusterUpgradeSummaryValidationResult(ctx context.Context, in *ClusterUpgradeRequest, opts ...grpc.CallOption) (*ClusterUpgradeResponse, error) {
	out := new(ClusterUpgradeResponse)
	err := c.cc.Invoke(ctx, "/client.silverSurfer.grpc.SilverSurferService/GetClusterUpgradeSummaryValidationResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SilverSurferServiceServer is the server API for SilverSurferService service.
// All implementations must embed UnimplementedSilverSurferServiceServer
// for forward compatibility
type SilverSurferServiceServer interface {
	GetClusterUpgradeSummaryValidationResult(context.Context, *ClusterUpgradeRequest) (*ClusterUpgradeResponse, error)
	mustEmbedUnimplementedSilverSurferServiceServer()
}

// UnimplementedSilverSurferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSilverSurferServiceServer struct {
}

func (UnimplementedSilverSurferServiceServer) GetClusterUpgradeSummaryValidationResult(context.Context, *ClusterUpgradeRequest) (*ClusterUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterUpgradeSummaryValidationResult not implemented")
}
func (UnimplementedSilverSurferServiceServer) mustEmbedUnimplementedSilverSurferServiceServer() {}

// UnsafeSilverSurferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SilverSurferServiceServer will
// result in compilation errors.
type UnsafeSilverSurferServiceServer interface {
	mustEmbedUnimplementedSilverSurferServiceServer()
}

func RegisterSilverSurferServiceServer(s grpc.ServiceRegistrar, srv SilverSurferServiceServer) {
	s.RegisterService(&SilverSurferService_ServiceDesc, srv)
}

func _SilverSurferService_GetClusterUpgradeSummaryValidationResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SilverSurferServiceServer).GetClusterUpgradeSummaryValidationResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.silverSurfer.grpc.SilverSurferService/GetClusterUpgradeSummaryValidationResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SilverSurferServiceServer).GetClusterUpgradeSummaryValidationResult(ctx, req.(*ClusterUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SilverSurferService_ServiceDesc is the grpc.ServiceDesc for SilverSurferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SilverSurferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.silverSurfer.grpc.SilverSurferService",
	HandlerType: (*SilverSurferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterUpgradeSummaryValidationResult",
			Handler:    _SilverSurferService_GetClusterUpgradeSummaryValidationResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/grpc/service.proto",
}
